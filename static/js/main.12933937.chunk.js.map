{"version":3,"sources":["header/netf.svg","header/leech.svg","utils/Base64.ts","services/Services.ts","result/Result.tsx","create/Create.tsx","footer/Footer.tsx","header/Header.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Base64encoder","digits","digitsMap","this","split","Map","i","length","set","int32","fixedLength","result","padStart","digitsStr","get","services","name","startDate","Date","pricePerPersonInEur","Base64","Result","useState","items","setItems","useEffect","Error","parsedItems","startIndex","itemStr","substr","item","decodeResultItem","push","error","console","log","handleResultParams","className","map","key","encoded","style","textAlign","backgroundColor","borderRadius","padding","JSON","stringify","serviceTypeX64","charAt","monthsElapsedX64","RESULT_ITEM_LENGTH","serviceTypeId","toInt","monthsElapsed","serviceType","index","service","Services","price","calculateStartDate","date","setMonth","setHours","Create","type","setType","setDate","getMonth","initializeDate","fromDate","setFromDate","url","setUrl","fromInt","dateFromStr","dateFrom","now","getFullYear","calculateMonthsElapsed","generateUrl","Form","noValidate","FormGroup","FormLabel","Control","as","custom","onChange","e","currentTarget","value","view","onClickMonth","Array","isArray","maxDate","showNeighboringMonth","renderResult","Footer","process","href","Header","src","netf","alt","leech","App","path","component","props","match","params","icon","faChevronDown","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.12933937.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/netf.61f12706.svg\";","module.exports = __webpack_public_path__ + \"static/media/leech.b5ad0c82.svg\";","export default class Base64encoder {\n  constructor() {\n    const digitsStr =\n      // 2     8       16      24      32      40      48      56     63\n      // v     v       v       v       v       v       v       v      v\n      \"abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ+-\";\n    this.digits = digitsStr.split(\"\");\n    this.digitsMap = new Map<string, number>();\n    for (let i = 0; i < this.digits.length; i++) {\n      this.digitsMap.set(this.digits[i], i);\n    }\n  }\n\n  private digits: string[];\n  private digitsMap: Map<string, number>;\n\n  public fromInt(int32: number, fixedLength?: number) {\n    let result = \"\";\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      result = this.digits[int32 & 0x3f] + result;\n      int32 >>>= 6;\n      if (int32 === 0) break;\n    }\n    if (fixedLength) {\n      result = result.padStart(fixedLength, this.digits[0]);\n    }\n    return result;\n  }\n\n  public toInt(digitsStr: string) {\n    let result = 0;\n    for (let i = 0; i < digitsStr.length; i++) {\n      result = (result << 6) + (this.digitsMap.get(digitsStr[i]) || 0);\n    }\n    return result;\n  }\n}\n","interface ServiceType {\n  name: string;\n  startDate: Date;\n  pricePerPersonInEur: number;\n}\n\nexport class Netflix implements ServiceType {\n  name = \"Netflix\";\n  startDate = new Date(\"2013-08-01\");\n  pricePerPersonInEur = 13.99 / 5;\n}\n\nexport class Spotify implements ServiceType {\n  name = \"Spotify\";\n  startDate = new Date(\"2014-10-01\");\n  pricePerPersonInEur = 7.99 / 6;\n}\n\nexport const services: ServiceType[] = [new Netflix(), new Spotify()];\n\nexport function findService(index: number) {\n  const service = services[index];\n  if (!service) {\n    throw new Error(`ServiceType not found by ID: ${index}`);\n  }\n  return service;\n}\n","import React, { useState, useEffect } from \"react\";\nimport Base64encoder from \"../utils/Base64\";\nimport * as Services from \"../services/Services\";\n\nconst RESULT_ITEM_LENGTH = 3;\nconst Base64 = new Base64encoder();\n\nexport const Result = ({ result }: { result: string }) => {\n  const [items, setItems] = useState<any[]>();\n\n  useEffect(() => {\n    try {\n      setItems(handleResultParams(result));\n    } catch (error) {\n      console.log(\"Result error\", error);\n    }\n  }, [result]);\n\n  return (\n    <div className=\"App row p-3\">\n      <div className=\"col App-header\">\n        <p>Result:</p>\n\n        {items &&\n          items.map((item) => {\n            return (\n              <div key={item.encoded}>\n                <pre\n                  style={{\n                    textAlign: \"left\",\n                    backgroundColor: \"gray\",\n                    borderRadius: \"25px\",\n                    padding: \"10px\"\n                  }}\n                >\n                  {JSON.stringify(item, null, 2)}\n                </pre>\n              </div>\n            );\n          })}\n      </div>\n    </div>\n  );\n};\nfunction decodeResultItem(itemStr: string) {\n  const serviceTypeX64 = itemStr.charAt(0);\n  const monthsElapsedX64 = itemStr.substr(1, RESULT_ITEM_LENGTH - 1);\n\n  const serviceTypeId = Base64.toInt(serviceTypeX64);\n  const monthsElapsed = Base64.toInt(monthsElapsedX64);\n\n  console.log(\"Decode params:\", {\n    serviceTypeX64,\n    serviceTypeId,\n    monthsElapsedX64,\n    monthsElapsed\n  });\n\n  const serviceType = Services.findService(serviceTypeId);\n\n  return {\n    encoded: itemStr,\n    serviceTypeId,\n    serviceType,\n    monthsElapsed,\n    price: monthsElapsed * serviceType.pricePerPersonInEur,\n    startDate: calculateStartDate(monthsElapsed)\n  };\n}\n\nfunction handleResultParams(result: string) {\n  if (!result) {\n    throw new Error(\"result params is empty!\");\n  }\n  if (result.length % RESULT_ITEM_LENGTH !== 0) {\n    throw new Error(\n      `result param length is invalid - not multiple of ${RESULT_ITEM_LENGTH}`\n    );\n  }\n\n  const length = result.length;\n  const items = length / RESULT_ITEM_LENGTH;\n  const parsedItems = [];\n\n  for (let i = 0; i < items; i++) {\n    const startIndex = i * RESULT_ITEM_LENGTH;\n    const itemStr = result.substr(startIndex, RESULT_ITEM_LENGTH);\n\n    try {\n      const item = decodeResultItem(itemStr);\n\n      parsedItems.push(item);\n    } catch (error) {\n      console.log(`Couldn't parse item: ${itemStr}`, error);\n    }\n  }\n\n  console.log(\"parsedItems\", parsedItems);\n\n  return parsedItems;\n}\n\nfunction calculateStartDate(monthsElapsed: number) {\n  const date = new Date();\n  date.setMonth(-monthsElapsed);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}\n","import React, { useState, useEffect } from \"react\";\nimport { Form, FormGroup, FormLabel } from \"react-bootstrap\";\nimport Calendar from \"react-calendar\";\n\nimport Base64encoder from \"../utils/Base64\";\nimport * as Services from \"../services/Services\";\nimport { Result } from \"../result/Result\";\n\nimport \"react-calendar/dist/Calendar.css\";\nimport \"./Create.scss\";\n\nconst Base64 = new Base64encoder();\n\nexport const Create = () => {\n  const [type, setType] = useState<any>(0);\n  const [fromDate, setFromDate] = useState<Date>(initializeDate());\n  const [url, setUrl] = useState<any>();\n\n  function handleMonthChange(date: Date | Date[]) {\n    console.log(\"month changed\", { date });\n\n    if (Array.isArray(date)) {\n      if (date && date.length > 0) {\n        setFromDate(date[0]);\n      }\n    } else {\n      setFromDate(date);\n    }\n  }\n\n  function handleTypeChange(e: React.ChangeEvent<HTMLInputElement>) {\n    console.log(\"type changed\", e.currentTarget.value);\n\n    setType(e.currentTarget.value);\n  }\n\n  useEffect(() => {\n    function generateUrl() {\n      console.log(\"generateUrl()\", { type, fromDate });\n\n      if (typeof type !== \"undefined\" && fromDate) {\n        const serviceType = Base64.fromInt(type);\n        const monthsElapsed = Base64.fromInt(\n          calculateMonthsElapsed(fromDate),\n          2\n        );\n\n        return `${serviceType}${monthsElapsed}`;\n      } else {\n        return ``;\n      }\n    }\n\n    setUrl(generateUrl());\n  }, [type, fromDate]);\n\n  function renderResult() {\n    if (url && url.length >= 3) return <Result result={url} />;\n  }\n\n  // TODO: https://stackoverflow.com/a/27875018\n  return (\n    <div className={\"create \" + Services.services[type].name}>\n      {/* <div className={\"create-overlay \" + Services.services[type].name}></div> */}\n      <div className=\"row\">\n        <Form className=\"create-form col-md-4 offset-md-1\" noValidate>\n          <FormGroup className=\"row\">\n            <FormLabel className=\"col-sm-4\">Type</FormLabel>\n            <div className=\"col-sm-8\">\n              <Form.Control as=\"select\" custom onChange={handleTypeChange}>\n                {Services.services.map((service, index) => (\n                  <option key={index} value={index}>\n                    {service.name}\n                  </option>\n                ))}\n              </Form.Control>\n            </div>\n          </FormGroup>\n\n          <FormGroup className=\"row\">\n            <FormLabel className=\"col-sm-4\">From</FormLabel>\n            <div className=\"col-sm-8\">\n              <Calendar\n                view=\"year\"\n                value={fromDate}\n                onClickMonth={handleMonthChange}\n                maxDate={new Date()}\n                showNeighboringMonth\n              />\n            </div>\n          </FormGroup>\n\n          <FormGroup className=\"row\">\n            <FormLabel className=\"col-sm-4\">Url value</FormLabel>\n\n            <pre className=\"col-sm-8\">{url}</pre>\n          </FormGroup>\n        </Form>\n\n        <div className=\"col-md-4 offset-md-1\">{url && renderResult()}</div>\n      </div>\n    </div>\n  );\n};\n\nfunction initializeDate(): Date {\n  const date = new Date();\n  date.setDate(0);\n  date.setHours(0, 0, 0, 0);\n  date.setMonth(date.getMonth() - 6);\n  return date;\n}\n\nfunction calculateMonthsElapsed(dateFromStr: string | Date) {\n  if (!dateFromStr) return 0;\n  const dateFrom = new Date(dateFromStr);\n\n  const now = new Date();\n  return (\n    now.getMonth() -\n    dateFrom.getMonth() +\n    12 * (now.getFullYear() - dateFrom.getFullYear())\n  );\n}\n","import React from \"react\"\n\nexport const Footer = () => {\n  return (\n    <footer>\n      <p className=\"center\">build: &ldquo;{ process.env.REACT_APP_COMMIT_SHA }&ldquo;</p>\n\n      <p>\n        <span>Photo by <a href=\"https://unsplash.com/@wesleyphotography?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Wesley Tingey</a> on <a href=\"https://unsplash.com/?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></span>\n      </p>\n      <p>\n        <span>Photo by <a href=\"https://unsplash.com/@zarakvg?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Zarak Khan</a> on <a href=\"https://unsplash.com/s/photos/spotify-streaming?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></span>\n      </p>\n    </footer>\n  )\n}\n","import React from \"react\"\n\nimport netf from \"./netf.svg\";\nimport leech from \"./leech.svg\";\n\nexport const Header = () => {\n  return (\n    <header>\n      <div className=\"header-logo center\">\n        <img src={netf} className=\"netf\" alt=\"netf\" />\n        <img src={leech} className=\"leech\" alt=\"leech\" />\n\n        <p className=\"header-text\">\n          Free streaming budget calculator\n        </p>\n      </div>\n\n    </header>\n  )\n}\n","import React from \"react\";\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faChevronDown } from '@fortawesome/free-solid-svg-icons'\nimport { Create } from \"./create/Create\";\nimport { Footer } from \"./footer/Footer\";\nimport { Header } from \"./header/Header\";\nimport { Result } from \"./result/Result\";\n\nimport \"./App.scss\";\n\nfunction App() {\n  return (\n    <Router>\n\n      <Header />\n\n      <div className=\"body\">\n        {/* <NavLink exact to=\"/\" className=\"m-1\">\n          Home\n        </NavLink>\n\n        <span className=\"m-2\">Tests:</span>\n\n        <NavLink exact to=\"/a3f\" className=\"m-1\">\n          /a3f\n        </NavLink>\n        <NavLink exact to=\"/b52\" className=\"m-1\">\n          /b52\n        </NavLink>\n        <NavLink exact to=\"/aaZb52\" className=\"m-1\">\n          /aaZb52\n        </NavLink> */}\n        <Switch>\n          <Route\n            path=\"/:result([\\w+-]{3,})\"\n            component={(props: any) => (\n              <Result result={props.match?.params?.result as string} />\n            )}\n          />\n\n          <Route path=\"/\">\n            {/* main content */}\n            <div className=\"home row d-flex justify-content-center\">\n              <p className=\"col-md-5\">\n                Ever wondered how much you <span className=\"highlight\">spent</span> on streaming?\n              </p>\n\n              <div className=\"w-100\"></div>\n\n              <p className=\"col-md-6\">\n                Calculate for free your Netflix, Spotify, HBO Go or other streaming service <span className=\"highlight\">budgets</span> with <br/> Netfleech.\n              </p>\n\n              <div className=\"w-100\"></div>\n\n              <p className=\"col-md-12\">\n                <button className=\"btn btn-primary btn-lg hiw-btn\">How it works?</button>\n              </p>\n\n              <p className=\"calculate-btn-div\">\n                <button className=\"btn btn-outline-primary btn-lg cff-btn\">Calculate for free!</button>\n\n                <br/>\n\n                <FontAwesomeIcon icon={ faChevronDown } className=\"chevron-down\" />\n              </p>\n            </div>\n\n            {/* create */}\n            <Create />\n\n          </Route>\n        </Switch>\n      </div>\n\n      <Footer />\n\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"./index.scss\";\nimport \"./custom.scss\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}